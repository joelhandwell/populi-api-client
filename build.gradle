buildscript {
    ext.kotlin_version = '1.3.31'
    ext.spek_version = '2.0.5'
    ext.retrofit_version = '2.5.0'
    ext.github_url = "https://github.com/joelhandwell/$project.name"
    ext.library_desc = 'Populi API Client with Retrofit2 and JAXB'
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id "org.jetbrains.kotlin.plugin.noarg" version "1.3.31"
    id 'org.jetbrains.dokka' version '0.9.18'
    id "com.jfrog.bintray" version "1.8.4"
    id 'maven'
    id 'maven-publish'
}

group 'com.github.joelhandwell'
version '1.0.0'

repositories {
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-jaxb:$retrofit_version"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"

    //assertion
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    //spek2
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
    testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:$spek_version"
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //wiremock
    testImplementation 'com.github.tomakehurst:wiremock:2.23.2'

    // log
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
}

noArg {
    annotation("javax.xml.bind.annotation.XmlRootElement")
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// Bintray
task sourceJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

task dokkaJar(type: Jar, dependsOn: dokka) {
    archiveClassifier.set("javadoc")
    from tasks.dokka
}

artifacts {
    archives sourceJar
    archives dokkaJar
    archives jar
}

String bintrayUser = System.getenv("BINTRAY_USER")
String bintrayApiKey = System.getenv("BINTRAY_API_KEY")
String bintrayGpgPassword = System.getenv("BINTRAY_GPG_PASSWORD")

if (bintrayUser == null || bintrayApiKey == null) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    bintrayUser = properties.getProperty("bintray.user")
    bintrayApiKey = properties.getProperty("bintray.apikey")
    bintrayGpgPassword = properties.getProperty("bintray.gpg.password")
}

bintray {
    user = bintrayUser
    key = bintrayApiKey
    configurations = ['archives']
    //dryRun = true
    override = true
    pkg {
        repo = 'maven'
        name = project.name
        desc = library_desc
        websiteUrl = github_url
        issueTrackerUrl = "$github_url/issues"
        vcsUrl = github_url
        licenses = ['Apache-2.0']
        labels = ['Populi', 'Retrofit', 'JAXB']
        publish = true
        publicDownloadNumbers = true
        version {
            gpg {
                name = project.version
                vcsTag = project.version
                sign = true
                passphrase = bintrayGpgPassword
            }
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution library_desc
        }
    }
    developers {
        developer {
            id "joelhandwell"
            name "Joel Handwell"
            email "joelhandwell@gmail.com"
        }
    }

    scm {
        url github_url
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact tasks.sourceJar
            artifact tasks.dokkaJar
            groupId project.group
            artifactId project.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', library_desc)
                root.appendNode('name', project.name)
                root.appendNode('url', github_url)
                root.children().last() + pomConfig
            }
        }
    }
    repositories {
        maven {
            url = uri("$buildDir/repository")
        }
    }
}
